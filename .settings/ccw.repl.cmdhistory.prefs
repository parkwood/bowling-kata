#Sun Jan 01 14:32:15 GMT 2012
cmdhistory=["(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(doc reify)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(use 'scoring-bowling.test.core)" "(run-tests)" "(in-ns scoring-bowling.test.core)" "(in-ns 'scoring-bowling.test.core)" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(do-bowls (game) 0 20)" "(total-score(do-bowls (game) 0 20))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(defrecord frame [strike roll1 roll2])\\r\\n" "(frame. false)" "(frame. false nil nil)" "(conj 1 [12 2 3])" "(conj  [12 2 3] 1)" "(cons  [12 2 3] 1)" "(cons  1 [12 2 3] )" "(defn strike [{\:keys roll1}]\\r\\n  (\= 10 roll1))" "(defn strike [{\:keys [roll1]}]\\r\\n  (\= 10 roll1))" "(strike {roll1\:10})" "(defn strike [frame]\\r\\n  (let [{\:keys [roll1]}]\\r\\n  (\= 10 roll1))" "(defn strike [frame]\\r\\n  (let [{\:keys [roll1]}]\\r\\n  (\= 10 roll1)))" "(defn strike [{\:keys [roll1]}]\\r\\n  (\= 10 roll1))" "(strike {\:roll1\:10})" "(strike {\:roll1 10})" "(strike {\:roll1 9})" "(doc nil?)" "(doc vals)" "(doc apply)" "(doc partial)" "(partial identity 1)" "((partial identity 1))" "(doc def)" "(defn both-rolls-taken [frame]\\r\\n   (every? identity (vals frame)))" "(both-rolls-taken {\:q 1 \:r 2})" "(both-rolls-taken {\:q 1 \:r nil})" "(defprotocol Game\\r\\n  (total-score [this])\\r\\n  (bowl [this points])\\r\\n  )\\r\\n\\r\\n(defrecord frame [roll1 roll2])\\r\\n\\r\\n(defn strike? [{\:keys [roll1]}]\\r\\n  (\= 10 roll1))\\r\\n\\r\\n(defn both-rolls-taken? [frame]\\r\\n   (every? identity (vals frame)))\\r\\n\\r\\n\\r\\n(defn next-frame? [[current-frame & previous]]\\r\\n  (if (and current-frame (not (strike? current-frame)) (not(both-rolls-taken? current-frame))) false true) \\r\\n  )\\r\\n\\r\\n(defrecord GameImpl [frames]\\r\\n  (total-score [this] -1) \\r\\n  (bowl [this points]\\r\\n        (let [[head-frame & previous-frames] frames]\\r\\n      (if (next-frame? frames)\\r\\n        (GameImpl. (cons (frame. points nil) frames)))))\\r\\n  )\\r\\n\\r\\n(defn game [] \\r\\n  (GameImpl. []))" "(defrecord GameImpl [frames]\\r\\n  (total-score [this] -1) \\r\\n  (bowl [this points]\\r\\n        (let [[head-frame & previous-frames] frames]\\r\\n      (if (next-frame? frames)\\r\\n        (GameImpl. (cons (frame. points nil) frames)))))\\r\\n  )" "(defrecord GameImpl [head-frame & previous-frames]\\r\\n  (total-score [this] -1) \\r\\n  (bowl [this points]       \\r\\n      (if (next-frame? frames)\\r\\n        (GameImpl. (cons (frame. points nil) frames))))\\r\\n  )" "(defrecord GameImpl [head-frame & previous-frames]\\r\\n  (total-score [this] -1) \\r\\n  (bowl [this points] )\\r\\n  )" "(defrecord GameImpl [head-frame & previous-frames]\\r\\n  Game\\r\\n  (total-score [this] -1) \\r\\n  (bowl [this points]       \\r\\n      (if (next-frame? frames)\\r\\n        (GameImpl. (cons (frame. points nil) frames))))\\r\\n  )" "(defrecord GameImpl [head-frame & previous-frames \:as frames]\\r\\n  Game\\r\\n  (total-score [this] -1) \\r\\n  (bowl [this points]       \\r\\n      (if (next-frame? frames)\\r\\n        (GameImpl. (cons (frame. points nil) frames))))\\r\\n  )" "(defrecord GameImpl [[head-frame & previous-frames] \:as frames]\\r\\n  Game\\r\\n  (total-score [this] -1) \\r\\n  (bowl [this points]       \\r\\n      (if (next-frame? frames)\\r\\n        (GameImpl. (cons (frame. points nil) frames))))\\r\\n  )" "(doc \:as)" "(defn x [a & b \:as c])" "(defn x [[a & b] \:as c] )" "(defrecord GameImpl [[head-frame & previous-frames \:as frames] ]\\r\\n  Game\\r\\n  (total-score [this] -1) \\r\\n  (bowl [this points]       \\r\\n      (if (next-frame? frames)\\r\\n        (GameImpl. (cons (frame. points nil) frames))))\\r\\n  )" "(defn x [[a & b \:as c] ] )" "(defrecord GameImpl [[head-frame & previous-frames \:as frames] ]\\r\\n  Game\\r\\n  (total-score [this] -1) \\r\\n  (bowl [this points]       )\\r\\n  )" "(defrecord x [[a & b \:as c] ] )" "(defrecord GameImpl [frames ]\\r\\n  Game\\r\\n  (total-score [this] -1) \\r\\n  (bowl [this points]       \\r\\n      (if (next-frame? frames)\\r\\n        (GameImpl. (cons (frame. points nil) frames))))\\r\\n  )" "(defn game [] \\r\\n  (GameImpl. []))" "(game)" "(bowl(game) 1)" "(bowl(game) 2)" "(defn next-frame? [[current-frame & previous]]\\r\\n  (if (or (nil? current-frame)  (strike? current-frame) (both-rolls-taken? current-frame)) false true) \\r\\n  )" "(bowl(game) 2)" "(next-frame? [])" "(defn next-frame? [[current-frame & previous]]\\r\\n  (if (or (nil? current-frame)  (strike? current-frame) (both-rolls-taken? current-frame)) true false )\\r\\n  )" "(next-frame? [])" "(bowl(game) 2)" "(frame.)" "(frame. nil nil)" "(doc update)" "(doc update-in)" "(doc put\\n     )" "(doc merge)" "(merge)" "(doc merge)" "(doc assoc)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(game)" "(in-ns 'scoring-bowling.core)" "(game)" "(bowl(game)1)" "(bowl(game)10)" "(bowl(bowl(game)10) 1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(bowl(bowl(game)10) 1)" "(run-tests)" "(in-ns 'scoring-bowling.test.core)" "(run-tests)" "(bowl(bowl(game)10) 1)" "(bowl(bowl(game)9) 10)" "(bowl (bowl(bowl(game)9) 10)1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(\= {} {}\\n   )" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(doc vec)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(doc size)" "(doc length)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(doc do)" "(do 1 2)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(still-playing? [])" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(still-playing? [])" "(game)" "(run-tests)" "(do-bowls (game) 10 5)" "(do-bowls (game) 10 6)" "(do-bowls (game) 10 7)" "(do-bowls (game) 10 10)" "(do-bowls (game) 10 11)" "(do-bowls (game) 10 13)" "(do-bowls (game) 10 131)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(do-bowls (game) 10 131)" "(still-playing?\\n  )" "(scoring-bowling.core/still-playing?)" "(scoring-bowling.core/still-playing? [])" "(scoring-bowling.core/still-playing? (\:frames (game)))" "(bowl (game) 1)" ";; Loading file test\\\\scoring_bowling\\\\test\\\\core.clj" "(bowl (game) 1)" "(run-tests)" "(require 'scoring-bowling.core)" "(run-tests)" "(bowl (game) 1)" "(in-ns 'scoring-bowling.core)" "(bowl (game) 1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(bowl (game) 1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(bowl (game) 1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(bowl (game) 1)" ";; Loading file src\\\\scoring_bowling\\\\core.clj" "(bowl (game) 1)" "(require 'scoring-bowling.core)" "(in-ns 'scoring-bowling.core)" "(bowl (game) 1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(bowl (game) 1)" ";; Loading file src\\\\scoring_bowling\\\\core.clj" "(bowl (game) 1)" "(defn b [a x & more])" "(defn b [[a x & more]])" "(b [])" "(b [1])" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(in-ns 'scoring-bowling.test.core)" "(run-tests\\n  )" "\\n(bowl (game) 0)" "\\n(do-bowls (game) 0 40)" "\\n(do-bowls (game) 0 4)" "(defn spare? [{\:keys [roll1 roll2] \:as frame}]  \\r\\n  (and (both-rolls-taken? frame)(\= 10 (+ roll1 roll2))))\\r\\n" "(spare? (game))" "(spare? (first(\:frames (game))))" "(game)" "(first(\:frames (game)))" "(\:frames (game))" "(spare? (first(\:frames (bowl (game) 1))))" "(spare? (first(\:frames (bowl (game) 10))))" "(spare? (first(\:frames (bowl(bowl (game) 1)9))))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(spare? (first(\:frames (bowl(bowl (game) 1)9))))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(do-bowls (bowl (bowl (bowl (game) 9) 4) 4) 0 17)" "(+ 1 nil)" "(cons nil nil)" "(frame.)" "(.frame)" "(frame.  1 1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(frame.  1 1)" "(game)" "(bowl(game)1" "(bowl(game)1)" "(frame.  1 1)" "(frame  1 1)" "(frame.  1 1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(scoring-bowling.core/frame.  1 1)" "(flatten(map vals [{\:roll1 10 \:ro nil}{\:q 1 \:w 2}]))" "(filter identity (flatten(map vals [{\:roll1 10 \:ro nil}{\:q 1 \:w 2}])))" "(filter identity (flatten(map vals (take 3 [{\:roll1 10 \:ro nil}{\:q 1 \:w 2}]))))" "(filter identity (flatten(map vals (take 4 [{\:roll1 10 \:ro nil}{\:q 1 \:w 2}]))))" "(take 2 [1])" "(+ 1)" "(find rest)" "(doc rest)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(defn tot-up-scores [[current-frame & others \:as frames] score]\\r\\n  (loop [future-scores (filter identity (flatten(map vals (take 3 frames)))) ; 3 because strike could be followed by 2 strikes\\r\\n         frame-score (cond\\r\\n                       (strike? current-frame) (apply + (take 3  future-scores)) \\r\\n                       (spare? current-frame   (apply + (take 3 future-scores)))\\r\\n                       \:else  (apply + (take 2 future-scores))\\r\\n                       )\\r\\n         new-score (+ score frame-score)]\\r\\n     (if (not(seq others)) \\r\\n       new-score\\r\\n       (recur others new-score)       \\r\\n       )    \\r\\n    )  \\r\\n  )" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(tot-up-scores (\:frames (game)) 0)" "(tot-up-scores (\:frames (bowl(game) 2)) 0)" "(tot-up-scores (\:frames (bowl(game) 10)) 0)" "(tot-up-scores (\:frames (bowl(bowl(game) 10)10))\\n               0)" "(tot-up-scores (\:frames (bowl(bowl(game) 9)10))0)" "(tot-up-scores (\:frames (bowl(bowl(bowl(game) 9)10)9))0)" "(tot-up-scores (\:frames (bowl(bowl(bowl(game) 9)1)9))0)" "(tot-up-scores (\:frames (bowl(bowl(bowl(game) 8)1)9))0)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(tot-up-scores (\:frames (bowl(bowl(bowl(game) 8)1)9))0)" "(next-frame? (bowl (game)8))" "(next-frame? (bowl (game) 8))" " (bowl (game) 8)" "(next-frame? (\:frames (bowl (game) 8)))\\n" "(bowl (bowl (game) 8)9)" "(bowl(bowl (bowl (game) 8)9)1)" "(doc conj)" "(doc rest)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(bowl (game) 0)" "(total-score(bowl (game) 0))" "(\= -1 (total-score(bowl (game) 0)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(\= -1 (total-score(bowl (game) 0)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(\= -1 (total-score(bowl (game) 0)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ns)" "(ns-refers)" "(ns-name)" "(in-ns 'scoring-bowling.test.core)" "(run-tests)" "(do-bowls (game) 0 20)" "(total-score (do-bowls (game) 0 20))" "(total-score (do-bowls (game) 0 22))" "(total-score (do-bowls (game) 0 21))" "(doc or)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(total-score (do-bowls (game) 0 21))" "(total-score (do-bowls (game) 0 20))" "(total-score (do-bowls (game) 0 22))" "(total-score (do-bowls (game) 0 221))" "(total-score (do-bowls (game) 0 30))" "(total-score (do-bowls (game) 0 20))" "(total-score (do-bowls (game) 0 21))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(in-ns 'scoring-bowling.test.core)" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(bowl(bowl (bowl (do-bowls(game)0 18) 10) 1)5)" "(bowl(bowl (bowl (do-bowls(game)0 18) 9) 1)5)" "(bowl(bowl (bowl (do-bowls(game)0 18) 10) 1)5)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(bowl(bowl (bowl (do-bowls(game)0 18) 10) 1)5)" "(run-tests)" "(bowl(bowl (bowl (do-bowls(game)0 18) 10) 1)5)" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 1)5))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 1)5))" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 1)4))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(total-score (game))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(total-score (game))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(in-ns 'scoring-bowling.test.core)" "(run-tests)" "(bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)10)" "(bowl(bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)10)10)" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)10))" "(total-score(bowl (bowl (do-bowls(game)0 18) 10) 10))" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)1))" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 1)1))" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 0)1))" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 0)0))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 0)0))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 0)1))" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 0)10))" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)10))" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)0))" "(total-score(bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)1))" "(+ 1 nil)" "(defrecord b [a]\\n  (c [this]) false)" "(defrecord b [a]\\n  (c [this] false) )" "(defrecord b [a]\\n  )" "(defrecord b [a]\\n  (c [this] false) )" "(doc nor)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "\\r\\n\\r\\n(defrecord frame [roll1 roll2]\\r\\n  (next-frame? [this]\\r\\n               (if (or \\r\\n                     (strike? this) \\r\\n                     (both-rolls-taken? this)) true false ))\\r\\n  (score [this future-scores]\\r\\n         (cond\\r\\n           (strike? this) (apply + (take 3  future-scores)) \\r\\n           (spare? this)   (apply + (take 3 future-scores))\\r\\n           \:else  (apply + (take 2 future-scores))\\r\\n           ))\\r\\n  (bowl-point [this frames points]\\r\\n        (if (next-frame? this)\\r\\n          (if (\=9 (count frames))\\r\\n            (conj frames  (tenth-frame. points nil)) \\r\\n            (conj frames  (frame. points nil))) \\r\\n          (conj (pop frames) (assoc this \:roll2 points)))  )\\r\\n  )\\r\\n" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(in-ns 'scoring-bowling.test.core)" "(run-tests)" "(if [] true false)" "(if  (seq[]) true false)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(in-ns 'scoring-bowling.test.core)" "(game)" "(bowl (game) 1) " "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(bowl (game) 1) " "(in-ns 'scoring-bowling.test.core)" "(bowl (game) 1) " "(GameImpl. [(not-tenth-frame. 3 nil)])" "(in-ns 'scoring-bowling.core)" "(GameImpl. [(not-tenth-frame. 3 nil)])" "(bowl (game) 1) " "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(in-ns 'scoring-bowling.core)" "(bowl (game) 1) " "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(in-ns 'scoring-bowling.core)" "(bowl (game) 1) " "(bowl(bowl (game) 1)1) " "(bowl(bowl(bowl (game) 1)1)1) " "(bowl(bowl(bowl (game) 10)1)1) " "(bowl(bowl(bowl (game) 10)10)1) " "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(in-ns 'scoring-bowling.test.core)" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(in-ns 'scoring-bowling.test.core)\\n" "(run-tests)" "(bowl (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 4) 1))" "(bowl (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 4) 1)" "( (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 4) )" "( \\n  )" "(bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 4) " "(bowl\\n  4) " " (bowl (bowl (do-bowls (game) 0 18) 9) 1)" " ((bowl (bowl (do-bowls (game) 0 18) 9) 1))" "(bowl-point (tenth-frame. 1 9 nil) [] 1)" "(in-ns 'scoring-bowling.core)\\n" "(bowl-point (tenth-frame. 1 9 nil) [] 1)" "(spare?\\n  (tenth-frame. 1 9 nil))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(spare?\\n  (tenth-frame. 1 9 nil))" "(bowl-point (tenth-frame. 1 9 nil) [] 1)" "(bowl-point (tenth-frame. 1 9 nil) [1] 1)" "(doc throw)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(run-tests)" "(in-ns 'scoring-bowling.test.core)\\n" "(run-tests)" "(total-score (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5)))" "(bowl-point (tenth-frame. 1 9 nil) [1] 1)" "(in-ns 'scoring-bowling.core)\\n" "(bowl-point (tenth-frame. 1 9 nil) [1] 1)" "(total-score (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5)))" ")" "(total-score (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5))" "(in-ns 'scoring-bowling.core)\\n" "(in-ns 'scoring-bowling.test.core)\\n" "(total-score (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5))" "(total-score )" "(bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5)" "(total-score (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5))" "(bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(in-ns 'scoring-bowling.core)\\n" "(bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5)" "(in-ns 'scoring-bowling.test.core)\\n" "(bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5)" "(still-playing? (\:frames \\n                  (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5)))" "(next-frame?  (tenth-frame. 1 9 nil))" "(next-frame?  (scoring-bowling.core/tenth-frame. 1 9 nil))" "(in-ns 'scoring-bowling.core)\\n" "(next-frame?  (tenth-frame. 1 9 nil))" "(next-frame?  (tenth-frame. 1 9 1))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(next-frame?  (tenth-frame. 1 9 1))" "(still-playing? (\:frames \\n                  (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5)))" "(in-ns 'scoring-bowling.test.core)\\n" "(still-playing? (\:frames \\n                  (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(still-playing? (\:frames \\n                  (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(still-playing? (\:frames \\n                  (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(still-playing? (\:frames \\n                  (bowl (bowl (bowl (do-bowls (game) 0 18) 9) 1) 5)))" "(run-tests)" "(total-score (do-bowls (bowl (bowl (bowl (game) 9) 1) 5) 0 17))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(total-score (do-bowls (bowl (bowl (bowl (game) 9) 1) 5) 0 17))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(total-score (do-bowls (bowl (bowl (bowl (game) 9) 1) 5) 0 17))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(in-ns 'scoring-bowling.test.core)\\n" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(in-ns 'scoring-bowling.test.core)\\n" "(run-tests)" "(apply + (filter identity [1 2 3]))" "(apply + (filter identity [1 2 3 nil]))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(run-tests)" "(in-ns 'scoring-bowling.test.core)\\n" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(game)" "(in-ns 'scoring-bowling.core)" "(game)" "(bowl(game)1)" "(bowl(bowl(game)1)2)" "(bowl(bowl(game)10)2)" "(defn do-bowls [game score times]\\r\\n   (reduce (fn [game _] (bowl game score))  game (range times))\\r\\n  )" "(do-bowls (game) 10 10)" "(bowl (do-bowls (game) 10 10) 3)" "(bowl(bowl (do-bowls (game) 10 10) 3)2)" "(bowl(bowl(bowl (do-bowls (game) 10 10) 3)2)1)" "(bowl(bowl (do-bowls (game) 10 10) 10)2)" "(bowl(bowl (do-bowls (game) 10 10) 10)10)" "(tot-up-scores (\:frames(bowl(bowl (do-bowls (game) 10 10) 10)2)) 0)" "(tot-up-scores (\:frames(bowl(bowl (do-bowls (game) 10 10) 10)10)) 0)" "(tot-up-scores (\:frames(bowl(bowl (do-bowls (game) 10 10) 10)9)) 0)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" ";; Loading file test\\\\scoring_bowling\\\\test\\\\core.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(total-score(do-bowls (game) 0 20))" "(count (\:frames (bowl(bowl(game)10) 1) ))" "(count (\:frames (bowl (bowl(bowl(game)9) 10)1)))" "(total-score(do-bowls \\r\\n                        (bowl(bowl (bowl (game) 10) 4)4)\\r\\n                        0 16))" "(total-score(do-bowls \\r\\n                        (bowl(bowl (bowl (game) 9) 1)5)\\r\\n                        0 17))" "(do-bowls (game)4 21)" "(try(do-bowls (game)4 21) (catch Exception e (.getMessage e)))" "(bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)10)" "(total-score  (bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)10)\\r\\n                        )" "(total-score  (bowl(bowl (bowl (do-bowls(game)0 18) 10) 1)4)\\r\\n                        )" "(bowl (bowl(bowl (bowl (do-bowls(game)0 18) 10) 1)4)1\\r\\n                        )" "(total-score  (bowl(bowl (bowl (do-bowls(game)0 18) 9) 1)5)\\r\\n                        )" "(bowl (bowl(bowl (bowl (do-bowls(game)0 18) 9) 1)4)1\\r\\n                        )" "(total-score (game))" "(bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)10)" "(total-score  (bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)10)\\r\\n                        )" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(in-ns 'scoring-bowling.core\\n       )" "(total-score  (bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)10)\\r\\n                        )" "\\r\\n(defn do-bowls [game score times]\\r\\n   (reduce (fn [game _] (bowl game score))  game (range times))\\r\\n  )" "(total-score  (bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)10)\\r\\n                        )\\n" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.core)))" "(total-score  (bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)10)\\r\\n                        )\\n" ";; Loading file src\\\\scoring_bowling\\\\core.clj" "\\r\\n(defn do-bowls [game score times]\\r\\n   (reduce (fn [game _] (bowl game score))  game (range times))\\r\\n  )" "(in-ns 'scoring-bowling.core\\n       )" "\\r\\n(defn do-bowls [game score times]\\r\\n   (reduce (fn [game _] (bowl game score))  game (range times))\\r\\n  )" "(total-score(do-bowls \\r\\n                        (bowl(bowl (bowl (game) 10) 4)4)\\r\\n                        0 16))" "(total-score  (bowl(bowl (bowl (do-bowls(game)0 18) 10) 10)10)\\r\\n                        )" "(total-score  (bowl(bowl (bowl (do-bowls(game)0 18) 10) 1)4)\\r\\n                        )" "(try (bowl (bowl(bowl (bowl (do-bowls(game)0 18) 10) 1)4)1\\r\\n                        ) (catch Exception e (.getMessage e)))" "(total-score  (bowl(bowl (bowl (do-bowls(game)0 18) 9) 1)5)\\r\\n                        )" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(in-ns 'scoring-bowling.test.core)" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" "(in-ns 'scoring-bowling.test.core)" "(run-tests)" "(doc lazy)" "(doc partition)" "(def x (atom []))" "(@x)" "(doc swap)" "(doc swap\!)" "(swap\! x conj 1)" "@x" "(defn bowl [history pins]\\r\\n  (partial bowl (history conj pins))\\r\\n  )\\r\\n\\r\\n(defn new-game []\\r\\n  (let [balls []]\\r\\n    (partial bowl (balls conj pins))\\r\\n    )\\r\\n  )" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.slim)))" "(new-game)" "(in-ns 'scoring-bowling.slim)" "(new-game)" " ((new-game) 3)" "(defn bowl [history pins]\\r\\n  (partial bowl ( conj history pins))\\r\\n  )" " ((new-game) 3)" " (((new-game) 3)4)" "(defn bowl\\r\\n  ([history]\\r\\n    (apply + history))\\r\\n  ([history pins]\\r\\n  (partial bowl ( conj history pins)))\\r\\n  )" " (((new-game) 3)4)" " ((((new-game) 3)4))" "(doc partition)" "(+ nil 1\\n   )" "(apply + [1 nil])" "(source +)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.slim)))" " ((((new-game) 3)4))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.slim)))" "(in-ns 'scoring-bowling.slim)" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.slim)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.slim)))" "(run-tests)" "(do-bowls ((take 11 (repeat 10)) 9))" "(do-bowls ((take 11 (repeat 10)) ))" "(do-bowls (take 12 (repeat 10)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.slim)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.slim)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.slim)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.slim)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.slim)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.slim)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'scoring-bowling.test.core)))" ";; Switching to scoring-bowling.test.core namespace" "(run-tests)"]
eclipse.preferences.version=1
